<blocks app="Snap4Arduino 1.0.6 beta http://s4a.cat/snap" version="1"><block-definition s="Nunchuk %&apos;opt&apos;" type="reporter" category="other"><header></header><code></code><inputs><input type="%txt" readonly="true">joyX<options>joyX
joyY
butZ
butC
accX
accY
accZ</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>    board = this.arduino.board; //Definition should change according to the context&#xD;    var checkedFirmware = false;&#xD;    for (i = 2; i &lt; (board.pins.length - 1); i++) {&#xD;        if (!(board.pins[i].supportedModes.indexOf(0x05) === -1)) {&#xD;           checkedFirmware = true;&#xD;           break;&#xD;        }&#xD;    }&#xD;    if (!checkedFirmware) {&#xD;        throw new Error("Please upload ImaginaFirmata to the board");&#xD;    }&#xD;</l></block><list></list></block><block s="doIf"><block s="reportEquals"><block var="opt"/><l>joyX</l></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Sysex Response definition&#xD;      board = this.arduino.board; //Definition should change according to the context&#xD;      world.Arduino.firmata.SYSEX_RESPONSE[0xC0] = function(board) {&#xD;      	var joyX = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);&#xD;      	board.emit("joyX", joyX);&#xD;      }&#xD;//&#xD;myself = this.arduino;&#xD;this.arduino.joyX = null;&#xD;      board.once("joyX", function(data){myself.joyX = data;});&#xD;      var sdata =[0xF0,//START_SYSEX,&#xD;				0xC0,//joyX command&#xD;				0xF7//END_SYSEX&#xD;	  ];&#xD;      board.transport.write(new Buffer(sdata));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (this.arduino.joyX != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return this.arduino.joyX;</l></block><list></list></block></block></script></block><block s="doIf"><block s="reportEquals"><block var="opt"/><l>joyY</l></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Sysex Response definition&#xD;      board = this.arduino.board; //Definition should change according to the context&#xD;      world.Arduino.firmata.SYSEX_RESPONSE[0xC1] = function(board) {&#xD;      	var joyY = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);&#xD;      	board.emit("joyY", joyY);&#xD;      }&#xD;//&#xD;myself = this.arduino;&#xD;this.arduino.joyY = null;&#xD;      board.once("joyY", function(data){myself.joyY = data;});&#xD;      var sdata =[0xF0,//START_SYSEX,&#xD;				0xC1,//joyY command&#xD;				0xF7//END_SYSEX&#xD;	  ];&#xD;      board.transport.write(new Buffer(sdata));&#xD;</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (this.arduino.joyY != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return this.arduino.joyY;</l></block><list></list></block></block></script></block><block s="doIf"><block s="reportEquals"><block var="opt"/><l>butZ</l></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Sysex Response definition&#xD;      board = this.arduino.board; //Definition should change according to the context&#xD;      world.Arduino.firmata.SYSEX_RESPONSE[0xC2] = function(board) {&#xD;      	var butZ = (board.currentBuffer[2] &amp; 0x7F);&#xD;      	board.emit("butZ", butZ);&#xD;      }&#xD;//&#xD;myself = this.arduino;&#xD;this.arduino.butZ = null;&#xD;      board.once("butZ", function(data){myself.butZ = data;});&#xD;      var sdata =[0xF0,//START_SYSEX,&#xD;				0xC2,//butZ command&#xD;				0xF7//END_SYSEX&#xD;	  ];&#xD;      board.transport.write(new Buffer(sdata));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (this.arduino.butZ != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return this.arduino.butZ;</l></block><list></list></block></block></script></block><block s="doIf"><block s="reportEquals"><block var="opt"/><l>butC</l></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Sysex Response definition&#xD;      board = this.arduino.board; //Definition should change according to the context&#xD;      world.Arduino.firmata.SYSEX_RESPONSE[0xC3] = function(board) {&#xD;      	var butC = (board.currentBuffer[2] &amp; 0x7F);&#xD;      	board.emit("butC", butC);&#xD;      }&#xD;//&#xD;myself = this.arduino;&#xD;this.arduino.butC = null;&#xD;      board.once("butC", function(data){myself.butC = data;});&#xD;      var sdata =[0xF0,//START_SYSEX,&#xD;				0xC3,//butC command&#xD;				0xF7//END_SYSEX&#xD;	  ];&#xD;      board.transport.write(new Buffer(sdata));&#xD;</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (this.arduino.butC != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return this.arduino.butC;</l></block><list></list></block></block></script></block><block s="doIf"><block s="reportEquals"><block var="opt"/><l>accX</l></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Sysex Response definition&#xD;      board = this.arduino.board; //Definition should change according to the context&#xD;      world.Arduino.firmata.SYSEX_RESPONSE[0xC4] = function(board) {&#xD;      	var accX = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);&#xD;      	board.emit("accX", accX);&#xD;      }&#xD;//&#xD;myself = this.arduino;&#xD;this.arduino.accX = null;&#xD;      board.once("accX", function(data){myself.accX = data;});&#xD;      var sdata =[0xF0,//START_SYSEX,&#xD;				0xC4,//accX command&#xD;				0xF7//END_SYSEX&#xD;	  ];&#xD;      board.transport.write(new Buffer(sdata));&#xD;</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (this.arduino.accX != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return this.arduino.accX;</l></block><list></list></block></block></script></block><block s="doIf"><block s="reportEquals"><block var="opt"/><l>accY</l></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Sysex Response definition&#xD;      board = this.arduino.board; //Definition should change according to the context&#xD;      world.Arduino.firmata.SYSEX_RESPONSE[0xC5] = function(board) {&#xD;      	var accY = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);&#xD;      	board.emit("accY", accY);&#xD;      }&#xD;//&#xD;myself = this.arduino;&#xD;this.arduino.accY = null;&#xD;      board.once("accY", function(data){myself.accY = data;});&#xD;      var sdata =[0xF0,//START_SYSEX,&#xD;				0xC5,//accX command&#xD;				0xF7//END_SYSEX&#xD;	  ];&#xD;      board.transport.write(new Buffer(sdata));&#xD;</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (this.arduino.accY != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return this.arduino.accY;</l></block><list></list></block></block></script></block><block s="doIf"><block s="reportEquals"><block var="opt"/><l>accZ</l></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Sysex Response definition&#xD;      board = this.arduino.board; //Definition should change according to the context&#xD;      world.Arduino.firmata.SYSEX_RESPONSE[0xC6] = function(board) {&#xD;      	var accZ = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);&#xD;      	board.emit("accZ", accZ);&#xD;      }&#xD;//&#xD;myself = this.arduino;&#xD;this.arduino.accZ = null;&#xD;      board.once("accZ", function(data){myself.accZ = data;});&#xD;      var sdata =[0xF0,//START_SYSEX,&#xD;				0xC6,//accX command&#xD;				0xF7//END_SYSEX&#xD;	  ];&#xD;      board.transport.write(new Buffer(sdata));&#xD;</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (this.arduino.accZ != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return this.arduino.accZ;</l></block><list></list></block></block></script></block></script></block-definition><block-definition s="Tone %&apos;pin&apos; pin - %&apos;freq&apos; Hz - %&apos;dur&apos; mseg" type="command" category="other"><header></header><code></code><inputs><input type="%n">14</input><input type="%n">440</input><input type="%n">0</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>pin</l><l>freq</l><l>dur</l></list><l>    board = this.arduino.board; //Definition should change according to the context&#xD;    if (board.pins[pin].supportedModes.indexOf(0x05) === -1) {&#xD;        throw new Error("Please upload ImaginaFirmata to the board and use a digital pin");&#xD;    }&#xD;      //Create blocs wit vars: pin, freq (frequency 0-65535 Hz) and dur (duration 0-4294967 mseg)&#xD;      if (pin === undefined || freq === undefined || pin &lt;= 0 || pin &gt; 255 || freq &lt; 0 || freq &gt; 65535) {&#xD;        throw new Error("Required var pin (0-255) and frequency (0-65535)");&#xD;      }&#xD;      var dur = dur || 0;&#xD;      dur = dur &amp; 0xFFFF; //clamping value to 32 bits&#xD;      var data =[0xF0, //START_SYSEX&#xD;      		0xC7,  //Tone Command&#xD;      		(dur &gt;&gt; 25) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 18) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 11) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 4) &amp; 0x7F,&#xD;      		((dur &lt;&lt; 3) &amp; parseInt("01111000",2)) | ((freq &gt;&gt; 13) &amp; parseInt("0111",2)),&#xD;      		(freq &gt;&gt; 6) &amp; 0x7F,&#xD;      		((freq &lt;&lt; 1) &amp; parseInt("01111110",2)) | ((pin &gt;&gt; 7) &amp; parseInt("01",2)),&#xD;      		pin &amp; 0x7F,&#xD;      		0xF7  //END_SYSEX&#xD;      ];&#xD;      board.transport.write(new Buffer(data));&#xD;</l></block><list><block var="pin"/><block var="freq"/><block var="dur"/></list></block></script></block-definition></blocks>